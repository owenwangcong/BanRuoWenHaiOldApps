{"version":3,"sources":["../../../src/@ionic-native/plugins/app-preferences/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Injectable } from '@angular/core';\n\n/**\n * @name App Preferences\n * @description\n * This plugin allows you to read and write app preferences\n *\n * @usage\n * ```typescript\n * import { AppPreferences } from '@ionic-native/app-preferences';\n *\n * constructor(private appPreferences: AppPreferences) { }\n *\n * ...\n *\n * this.appPreferences.fetch('key').then((res) => { console.log(res); });\n *\n * ```\n *\n */\n@Plugin({\n  pluginName: 'AppPreferences',\n  plugin: 'cordova-plugin-app-preferences',\n  pluginRef: 'plugins.appPreferences',\n  repo: 'https://github.com/apla/me.apla.cordova.app-preferences',\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'iOS', 'macOS', 'Windows 8', 'Windows Phone']\n})\n\nexport class AppPreferences extends IonicNativePlugin {\n\n  /**\n   * Get a preference value\n   *\n   * @param {string} dict Dictionary for key (OPTIONAL)\n   * @param {string} key Key\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  fetch(dict: string, key?: string): Promise<any> { return; }\n\n  /**\n   * Set a preference value\n   *\n   * @param {string} dict Dictionary for key (OPTIONAL)\n   * @param {string} key Key\n   * @param {any} value Value\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  store(dict: string, key: string, value?: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Remove value from preferences\n   *\n   * @param {string} dict Dictionary for key (OPTIONAL)\n   * @param {string} key Key\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  remove(dict: string, key?: string): Promise<any> { return; }\n\n  /**\n   * Clear preferences\n   *\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  clearAll(): Promise<any> { return; }\n\n  /**\n   * Show native preferences interface\n   *\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  show(): Promise<any> { return; }\n\n  /**\n   * Show native preferences interface\n   *\n   * @param {boolean} subscribe true value to subscribe, false - unsubscribe\n   * @return {Observable<any>} Returns an observable\n   */\n  @Cordova({\n    observable: true\n  })\n  watch(subscribe: boolean): Observable<any> { return; }\n\n  /**\n   * Return named configuration context\n   * In iOS you'll get a suite configuration, on Android â€” named file\n   * Supports: Android, iOS\n   * @param {string} suiteName suite name\n   * @returns {Object} Custom object, bound to that suite\n   */\n  @Cordova({\n    platforms: ['Android'],\n    sync: true\n  })\n  suite(suiteName: string): any { return; }\n\n  @Cordova({\n    platforms: ['iOS'],\n    sync: true\n  })\n  iosSuite(suiteName: string): any { return; }\n\n  /**\n   * Return cloud synchronized configuration context\n   * Currently supports Windows and iOS/macOS\n   * @returns {Object} Custom object, bound to that suite\n   */\n  @Cordova({\n    platforms: ['iOS', 'Windows', 'Windows Phone 8']\n  })\n  cloudSync(): Object { return; }\n\n  /**\n   * Return default configuration context\n   * Currently supports Windows and iOS/macOS\n   * @returns {Object} Custom Object, bound to that suite\n   */\n  @Cordova({\n    platforms: ['iOS', 'Windows', 'Windows Phone 8']\n  })\n  defaults(): Object { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}